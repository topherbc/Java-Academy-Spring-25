package com.grocer;

import java.util.ArrayList;
import java.util.stream.Collectors;

public class SearchUtilities {
    /**
     * Filters the product list to return only products from the specified category.
     *
     * @param category The product category to filter by (e.g., "Milk", "Cheese")
     * @param products The list of dairy products to filter
     * @return A new ArrayList containing only the products from the specified category
     */
    public static ArrayList<DairyProduct> getByProductCategory(String category, ArrayList<DairyProduct> products) {
        // Using streams with lambda expressions
        return products.stream()
                .filter(product -> product.getCategory().equalsIgnoreCase(category))
                .collect(Collectors.toCollection(() -> new ArrayList<>()));
        
        // Without streams (traditional approach)
        /*
        ArrayList<DairyProduct> filteredProducts = new ArrayList<>();
        for (DairyProduct product : products) {
            if (product.getCategory().equalsIgnoreCase(category)) {
                filteredProducts.add(product);
            }
        }
        return filteredProducts;
        */
    }

    /**
     * Calculates the total value of all products in inventory.
     * The value is calculated as the sum of (price Ã— stockQuantity) for each product.
     *
     * @param products The list of dairy products to calculate total value for
     * @return The total monetary value of all products in the inventory
     */
    public static double getTotalProductValue(ArrayList<DairyProduct> products) {
        // Using streams with lambda expressions
        return products.stream()
                .mapToDouble(product -> product.getPrice() * product.getStockQuantity())
                .sum();
        
        // Without streams (traditional approach)
        /*
        double total = 0.0;
        for (DairyProduct product : products) {
            total += product.getPrice() * product.getStockQuantity();
        }
        return total;
        */
    }

    /**
     * Counts the total number of products in the inventory.
     *
     * @param products The list of dairy products to count
     * @return The total count of products in the list
     */
    public static int getTotalProductCount(ArrayList<DairyProduct> products) {
        // Using streams with lambda expressions
        return (int) products.stream()
                .count();
        
        // Without streams (traditional approach)
        /*
        return products.size();
        */
    }

    /**
     * Counts the number of organic products in the inventory.
     * Organic products are those where the 'organic' field is true.
     *
     * @param products The list of dairy products to filter and count
     * @return The count of organic products in the list
     */
    public static int getTotalOrganicProductCount(ArrayList<DairyProduct> products) {
        // Using streams with lambda expressions
        return (int) products.stream()
                .filter(product -> product.isOrganic())
                .count();
        
        // Without streams (traditional approach)
        /*
        int count = 0;
        for (DairyProduct product : products) {
            if (product.isOrganic()) {
                count++;
            }
        }
        return count;
        */
    }
    
    /**
     * Returns all products in a new ArrayList.
     * 
     * @param products The list of dairy products
     * @return A new ArrayList containing all products
     */
    public static ArrayList<DairyProduct> getAllProducts(ArrayList<DairyProduct> products) {
        // Using streams with lambda expressions
        return products.stream()
                .collect(Collectors.toCollection(() -> new ArrayList<>()));
        
        // Without streams (traditional approach)
        /*
        return new ArrayList<>(products);
        */
    }
}